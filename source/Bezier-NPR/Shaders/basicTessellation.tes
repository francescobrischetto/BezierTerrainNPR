#version 410 core
layout(triangles,equal_spacing) in;
in vec3 tesPos[];
in vec3 tesNormal[];

out vec3 vNormal;
out vec3 lightDir;


// view matrix
uniform mat4 viewMatrix;
// Projection matrix
uniform mat4 projectionMatrix;
uniform mat3 normalMatrix;
uniform vec3 pointLightPosition;


vec3 lerp3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec3 lerp3DN(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3((v0.x + v1.x + v2.x)/3, (v0.y + v1.y + v2.y)/3, (v0.z + v1.z + v2.z)/3);
}


void main(){

    vec3 pos = lerp3D(tesPos[0],tesPos[1],tesPos[2]);
    vec3 normal = lerp3D(tesNormal[0], tesNormal[1], tesNormal[2]);
    vec4 mvPosition = viewMatrix * vec4( pos, 1.0 );
    vNormal = normalize( normal );
    vec4 lightPos = viewMatrix  * vec4(pointLightPosition, 1.0);
    lightDir = lightPos.xyz - mvPosition.xyz;
    gl_Position = projectionMatrix * mvPosition;



}